  λ(undefined : ∀(t : Type) → t)
→ let XTree = ./Type
  
  let XTreeF = ../XTreeF/Type
  
  let NonEmptyList = ../NonEmptyList/Type
  
  let List/concat = ../List/concat
  
  let List/map = ../List/map
  
  let NonEmptyList/concat1 =
          λ(t : Type)
        → λ(a : t)
        → λ(l : NonEmptyList t)
        → { head = a, tail = [ l.head ] # l.tail }
  
  let NonEmptyList/singleton =
        λ(t : Type) → λ(a : t) → { head = a, tail = [] : List t }
  
  let XTree/recite/Type =
          ∀(l : Type)
        → ∀(n : Type)
        → ∀(t : XTree l n)
        → { head : List n, tail : Optional l }
  
  in  undefined XTree/recite/Type : XTree/recite/Type
