    let Functor = ../Functor/Type

in    λ(f : Type → Type)
    → λ(functor : Functor f)
    →     let recursive = ./recursive f
      
      in  let embed =
                  λ(fm : f (./Type f))
                → λ(a : Type)
                → λ(alg : f a → a)
                → alg (functor.map (./Type f) a (recursive.cata a alg) fm)
      
      in    { embed =
                embed
            , project =
                ./../lambek (./Type f) f recursive.cata embed functor
            }
          : ./../Steppable/Type (./Type f) f
