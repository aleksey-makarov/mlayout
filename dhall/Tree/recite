let Tree = ./Type

let TreeBase = ../TreeBase/Type

let NonEmptyList = ../NonEmptyList/Type

let List/concat = ../List/concat

let List/map = ../List/map

let NonEmptyList/concat1 =
        λ(t : Type)
      → λ(a : t)
      → λ(l : NonEmptyList t)
      → { head = a, tail = [ l.head ] # l.tail }

let NonEmptyList/singleton =
      λ(t : Type) → λ(a : t) → { head = a, tail = [] : List t }

in    λ(a : Type)
    → λ(t : Tree a)
    → t
      (List (NonEmptyList a))
      (   λ(n : TreeBase a (List (NonEmptyList a)))
        → let appendThis =
                λ(l : NonEmptyList a) → NonEmptyList/concat1 a n.data l
          
          in    [ NonEmptyList/singleton a n.data ]
              # List/map
                (NonEmptyList a)
                (NonEmptyList a)
                appendThis
                (List/concat (NonEmptyList a) n.subtrees)
      )
