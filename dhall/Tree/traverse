
let Applicative = ../Applicative/Type

let Tree = ./Type

let Tree/recursive = ./recursive

let Tree/steppable = ./steppable

let TreeBase = ../TreeBase/Type

let Traversable/sequence = ../Traversable/sequence

let List/traversable = ../List/traversable

in    λ(f : Type → Type)
    → λ(applicative : Applicative f)
    → λ(a : Type)
    → λ(b : Type)
    → λ(g : a → f b)
    → λ(ts : Tree a)
    → let create
          : b → List (Tree b) → Tree b
          =   λ(d : b)
            → λ(l : List (Tree b))
            → (Tree/steppable b).embed { data = d, subtrees = l }
      
      let alg =
              λ(d : TreeBase a (f (Tree b)))
            → applicative.ap
              (List (Tree b))
              (Tree b)
              ( applicative.ap
                b
                (List (Tree b) → Tree b)
                (applicative.pure (b → List (Tree b) → Tree b) create)
                (g d.data)
              )
              ( Traversable/sequence
                List
                List/traversable
                f
                applicative
                (Tree b)
                d.subtrees
              )
      
      in  (Tree/recursive a).cata (f (Tree b)) alg ts
