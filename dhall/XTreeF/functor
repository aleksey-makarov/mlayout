let Functor = ./../Functor/Type

let TreeF = ./Type

let List/map = ../List/map

in    λ(l : Type)
    → λ(n : Type)
    →   { map =
              λ(a : Type)
            → λ(b : Type)
            → λ(g : a → b)
            → λ(t : TreeF l n a)
            → let f =
                      λ(x : < leaf : l | node : { node : n, subtrees : a } >)
                    → merge
                      { leaf =
                            λ(lx : l)
                          → < leaf = lx | node : { node : n, subtrees : b } >
                      , node =
                            λ(nx : { node : n, subtrees : a })
                          → < node =
                                { node = nx.node, subtrees = g nx.subtrees }
                            | leaf :
                                l
                            >
                      }
                      x
              
              in  List/map
                  < leaf : l | node : { node : n, subtrees : a } >
                  < leaf : l | node : { node : n, subtrees : b } >
                  f
                  t
        }
      : Functor (TreeF l n)
